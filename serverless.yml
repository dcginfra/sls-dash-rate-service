service: dash-exchange-rates
frameworkVersion: '3'

# custom domain for API gateway (using route53)
# https://serverless.com/blog/serverless-api-gateway-domain/
plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: ${file(config.${self:provider.stage}.yaml):domainName}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: false

    # (necessary if you use a wildcard SSL cert)
    certificateName: ${file(config.${self:provider.stage}.yaml):certificateName}
# -- end custom domain stuff

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64

  # you can overwrite defaults here
  stage: dev
  region: ${file(config.${self:provider.stage}.yaml):awsRegion}
  memorySize: 256
  timeout: 20
  stackTags:
    App: "DashRateAPI"
    Name: "DashExchangeRateCFStack"

  tags:
    Name: "Dash Rate API"

  # you can define service wide environment variables here
  environment:
    REDIS_URL: ${file(config.${self:provider.stage}.yaml):redisURL}

functions:

  # set up the fetch function
  fetch:
    handler: bootstrap
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: true
    tags:
      Name: "Dash Exchange Rates Fetch Lambda"
    vpc: ${file(config.${self:provider.stage}.yaml):vpc}
    package:
      individually: true  # required for bootstrap
      # Explicitly set the package artifact to deploy (overrides native packaging behavior)
      artifact: ./package/fetch.zip

  # set up the serve function
  serve:
    handler: bootstrap
    events:
      - http:
          path: exchange
          method: get
    tags:
      Name: "Dash Exchange Rates API Service"
    vpc: ${file(config.${self:provider.stage}.yaml):vpc}
    package:
      individually: true  # required for bootstrap
      # Explicitly set the package artifact to deploy (overrides native packaging behavior)
      artifact: ./package/serve.zip
